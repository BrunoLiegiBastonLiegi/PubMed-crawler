from bs4 import BeautifulSoup
from graph import Vertex, Graph, Graph_tool, Networkx
import networkx as nx
import numpy as np

with open('covid-6-clusters-loss=0.3.txt','r') as f:
    lines = f.readlines()

clusters = {}
for l in lines:
    tmp = str(l).split('  :  ')
    try:
        clusters[int(tmp[1][:-1])].append(tmp[0])
    except:
        clusters[int(tmp[1][:-1])] = [tmp[0]]

print(clusters)
        
with open('predicates/Covid-19-predicates.xml') as f:
    
    soup = BeautifulSoup(f.read(), "xml").find_all('Utterance')
    
    preds = []
    i = 0

    for sent in soup:
        predication = sent.Predication
        if predication != None:
            pred = predication.Predicate['type']
            if True:#pred in causePredicates or pred in twoDirectionalPredicates:
                subj = sent.find(id=predication.Subject['entityID'])
                obj = sent.find(id=predication.Object['entityID'])
                dict = {}
                try:
                    s = subj['name'].replace(':','')
                except:
                    s = subj['entrezName'].replace(':','')
                try:
                    o = [obj['name'].replace(':','')]
                except:
                    o = [obj['entrezName'].replace(':','')]
                preds.append(Vertex(s, [pred], o))
        i += 1
        print(i, '/', len(soup), '\r', end='')


f = Networkx(vertices=preds)
f.causal()
f.filter_by(method='redundancy', k=2)
#print(nx.spring_layout(f.g))
pos = {0: np.array([0.09754153, 0.11301817]), 1: np.array([0.14985781, 0.17615997]), 2: np.array([-0.15535835,  0.0779505 ]), 3: np.array([0.1078489 , 0.13098709]), 4: np.array([0.03748605, 0.1056015 ]), 5: np.array([0.34422937, 0.15166761]), 6: np.array([0.23035852, 0.10703898]), 7: np.array([0.1091765, 0.1045711]), 8: np.array([0.0857457 , 0.86923285]), 9: np.array([0.08589415, 0.90453684]), 10: np.array([-0.91385926, -0.17911644]), 11: np.array([-0.91675685, -0.19795606]), 12: np.array([0.00692543, 0.12713656]), 13: np.array([-0.04631564,  0.11526671]), 14: np.array([-0.04932099,  0.13306881]), 15: np.array([0.22739079, 0.07404401]), 16: np.array([0.15808288, 0.17787085]), 17: np.array([0.0974341 , 0.13696511]), 18: np.array([0.09865062, 0.16152603]), 19: np.array([0.19503751, 0.21113512]), 20: np.array([0.16157227, 0.11925479]), 21: np.array([0.20400774, 0.0583109 ]), 22: np.array([0.0820183 , 0.15471765]), 23: np.array([ 0.13335134, -0.0239155 ]), 24: np.array([0.15526791, 0.00200944]), 25: np.array([0.07623015, 0.13680419]), 26: np.array([0.09214801, 0.182608  ]), 27: np.array([-0.17681335,  0.80071609]), 28: np.array([0.17635916, 0.11652513]), 29: np.array([0.06341028, 0.12122709]), 30: np.array([0.12604263, 0.15568215]), 31: np.array([0.10274713, 0.2442928 ]), 32: np.array([ 0.23105408, -0.14225004]), 33: np.array([0.11168455, 0.08734745]), 34: np.array([0.07202124, 0.10413967]), 35: np.array([0.08775204, 0.09244367]), 36: np.array([0.09261296, 0.05546626]), 37: np.array([ 0.00177486, -0.35494513]), 38: np.array([0.15627536, 0.08617728]), 39: np.array([0.17217392, 0.06439808]), 40: np.array([0.10807886, 0.02651195]), 41: np.array([0.24517937, 0.10896914]), 42: np.array([0.17168622, 0.31601754]), 43: np.array([0.18037301, 0.26980974]), 44: np.array([-0.01187848,  0.19402414]), 45: np.array([0.03529787, 0.16766243]), 46: np.array([-0.03446288,  0.39916213]), 47: np.array([0.22465733, 0.18089659]), 48: np.array([ 0.52557944, -0.29978153]), 49: np.array([ 0.66853927, -0.37275365]), 50: np.array([ 0.09466886, -0.00230005]), 51: np.array([0.35912937, 0.770443  ]), 52: np.array([0.22519735, 0.24623119]), 53: np.array([0.61122361, 0.59744389]), 54: np.array([0.22358769, 0.02052827]), 55: np.array([0.17626993, 0.04585383]), 56: np.array([0.19455842, 0.0779295 ]), 57: np.array([ 0.12487282, -0.06127346]), 58: np.array([ 0.11259589, -0.0720984 ]), 59: np.array([ 0.00315243, -0.24480808]), 60: np.array([-0.19674139,  0.07009392]), 61: np.array([-0.07761118,  0.09239916]), 62: np.array([ 0.74265232, -0.1368962 ]), 63: np.array([0.38542755, 0.14915118]), 64: np.array([0.38693026, 0.16946105]), 65: np.array([ 0.17295912, -0.04187889]), 66: np.array([-0.16217804,  0.36152801]), 67: np.array([-0.54447124,  0.6725967 ]), 68: np.array([0.70744934, 0.4460956 ]), 69: np.array([-0.75571631,  0.12488404]), 70: np.array([-0.14916852, -0.39802309]), 71: np.array([-0.39118631, -0.79347331]), 72: np.array([ 0.59729052, -0.23294255]), 73: np.array([ 0.58388244, -0.24681828]), 74: np.array([-0.1649773 ,  0.55667551]), 75: np.array([0.18239114, 0.32988404]), 76: np.array([0.13242605, 0.11019232]), 77: np.array([-0.3851233 ,  0.77645039]), 78: np.array([0.20330343, 0.31132881]), 79: np.array([-0.2569654 , -0.91187257]), 80: np.array([ 0.58128649, -0.66555792]), 81: np.array([0.07533348, 0.06331518]), 82: np.array([0.06444394, 0.16720968]), 83: np.array([-0.08122285, -0.78888416]), 84: np.array([-0.08451302, -0.90638402]), 85: np.array([-0.9195237 ,  0.33980677]), 86: np.array([-0.89032274,  0.3266279 ]), 87: np.array([ 0.12205517, -0.60175598]), 88: np.array([ 0.17451664, -0.82982534]), 89: np.array([0.16840097, 0.29997786]), 90: np.array([-0.24783371, -0.77442425]), 91: np.array([-0.25316565, -0.79493858]), 92: np.array([-0.63280595, -0.5025045 ]), 93: np.array([-0.79115261, -0.65385218]), 94: np.array([-0.2931947 ,  0.70767778]), 95: np.array([-0.28436481,  0.69033601]), 96: np.array([0.04121423, 0.13230734]), 97: np.array([0.04608898, 0.08230554]), 98: np.array([0.01117612, 0.05485741]), 99: np.array([-0.0156928 ,  0.31792251]), 100: np.array([-0.68328591,  0.67712639]), 101: np.array([-0.07122494,  0.58229264]), 102: np.array([-0.89226595,  0.17081262]), 103: np.array([-0.88359127,  0.15642171]), 104: np.array([0.22054913, 0.12387434]), 105: np.array([ 0.36621764, -0.05279635]), 106: np.array([ 0.73847062, -0.34701651]), 107: np.array([0.44900585, 0.45187173]), 108: np.array([0.3023536 , 0.66406278]), 109: np.array([0.20861975, 0.25233864]), 110: np.array([0.0175403 , 0.11155637]), 111: np.array([0.15111541, 0.3857394 ]), 112: np.array([0.22128191, 0.82588415]), 113: np.array([-1.        ,  0.15904506]), 114: np.array([-0.6353478 , -0.75916397]), 115: np.array([-0.61557022, -0.733122  ]), 116: np.array([-0.59353541, -0.70402054]), 117: np.array([0.39305843, 0.57357629]), 118: np.array([0.41041591, 0.56482166]), 119: np.array([ 0.38535325, -0.20398984]), 120: np.array([ 0.57445244, -0.37148686]), 121: np.array([-0.5040853 , -0.69559794]), 122: np.array([-0.52299534, -0.69474291]), 123: np.array([ 0.39507754, -0.68443766]), 124: np.array([ 0.43155635, -0.74255857]), 125: np.array([ 0.15416786, -0.04628648]), 126: np.array([0.2673596 , 0.22536401]), 127: np.array([0.05935055, 0.15052391]), 128: np.array([0.21943812, 0.02951831]), 129: np.array([ 0.12386529, -0.73891017]), 130: np.array([ 0.13143088, -0.70788686]), 131: np.array([ 0.14974173, -0.72389556]), 132: np.array([ 0.24005625, -0.1810796 ]), 133: np.array([-0.00631758,  0.10871085]), 134: np.array([0.25103007, 0.20921436]), 135: np.array([ 0.45821541, -0.27167993]), 136: np.array([0.37637032, 0.08074629]), 137: np.array([ 0.80617863, -0.00664138]), 138: np.array([-0.82813676, -0.04059984]), 139: np.array([-0.85899459, -0.04154395]), 140: np.array([-0.89540932, -0.40584137]), 141: np.array([-0.87046645, -0.40864306]), 142: np.array([-0.80918064, -0.37708487]), 143: np.array([-0.93185525, -0.43469247]), 144: np.array([0.11202699, 0.17962982]), 145: np.array([ 0.25248958, -0.68626669]), 146: np.array([ 0.30878117, -0.82865083]), 147: np.array([-0.65495068,  0.32800793]), 148: np.array([-0.87326324,  0.48110269]), 149: np.array([0.24248939, 0.21290402]), 150: np.array([0.07586562, 0.17804678]), 151: np.array([ 0.51886496, -0.44186035]), 152: np.array([ 0.6131067 , -0.52185568]), 153: np.array([-0.76022861, -0.48597316]), 154: np.array([-0.84653434, -0.5481037 ])}

f.draw(pos=pos, highlight=[f.get_vertex(v) for v in clusters[5]])
